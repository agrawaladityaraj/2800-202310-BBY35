generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Dog             Dog[]
  MedicalDocument MedicalDocument[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dog {
  id               String             @id @default(cuid())
  name             String
  breed            String
  birthDate        DateTime?
  ownerId          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  owner            User               @relation(fields: [ownerId], references: [id])
  vaccines         Vaccine[]
  trainingVideos   DogTrainingVideo[]
  medicalDocuments MedicalDocument[]

  @@index([ownerId])
}

model TrainingVideo {
  id          String             @id @default(cuid())
  title       String
  description String
  url         String
  category    String
  energyLevel String
  size        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  dogs        DogTrainingVideo[]
}

model DogTrainingVideo {
  id              String        @id @default(cuid())
  dogId           String
  trainingVideoId String
  isCompleted     Boolean       @default(false)
  dog             Dog           @relation(fields: [dogId], references: [id])
  trainingVideo   TrainingVideo @relation(fields: [trainingVideoId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([dogId, trainingVideoId])
  @@index([trainingVideoId])
}

model Vaccine {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  dogId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dog       Dog      @relation(fields: [dogId], references: [id])

  @@index([dogId])
}

model MedicalDocument {
  id          String   @id @default(cuid())
  dogId       String
  userId      String
  title       String
  description String?
  fileType    String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dog         Dog      @relation(fields: [dogId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([dogId])
  @@index([userId])
}

model DogBreed {
  id                   String @id @default(cuid())
  breed                String
  countryOfOrigin      String
  furColor             String
  heightIn             String
  colorOfEyes          String
  longevityYrs         String
  characterTraits      String
  commonHealthProblems String
}
