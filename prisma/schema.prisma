generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  sessions         Session[]
  dogs             Dog[]
  medicalDocuments MedicalDocument[]
}

model Dog {
  id               String             @id @default(cuid())
  name             String
  breed            String
  birthDate        DateTime?
  ownerId          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  owner            User               @relation(fields: [ownerId], references: [id])
  vaccines         Vaccine[]
  trainingVideos   DogTrainingVideo[]
  medicalDocuments MedicalDocument[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model TrainingVideo {
  id          String             @id @default(cuid())
  title       String
  description String
  url         String
  category    String
  energyLevel String
  size        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  dogs        DogTrainingVideo[]
}

model DogTrainingVideo {
  id              String        @id @default(cuid())
  dogId           String
  trainingVideoId String
  isCompleted     Boolean       @default(false)
  dog             Dog           @relation(fields: [dogId], references: [id])
  trainingVideo   TrainingVideo @relation(fields: [trainingVideoId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([dogId, trainingVideoId])
}

model Vaccine {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  dogId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dog       Dog      @relation(fields: [dogId], references: [id])
}

model MedicalDocument {
  id          String   @id @default(cuid())
  dogId       String
  userId      String
  title       String
  description String?
  fileType    String
  fileUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dog         Dog      @relation(fields: [dogId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model DogBreed {
  id                   String @id @default(cuid())
  breed                String
  countryOfOrigin      String
  furColor             String
  heightIn             String
  colorOfEyes          String
  longevityYrs         String
  characterTraits      String
  commonHealthProblems String
}
